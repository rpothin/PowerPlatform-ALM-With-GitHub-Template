name: 6-create-github-release
# Generate a GitHub release for the considered solution

# Workflow triggered manually providing the mandatory information described below
on:
  workflow_dispatch:
    inputs:
      github_release_body:
        description: 'Text for the body of the GitHub release'
        required: true

env:
  solution_name: PowerPlatformALMWithGitHub # Name of the considered solution
  
jobs:
  create-build-environment:
    runs-on: windows-latest
    env:
      powerapps_environment_location: canada # Location for the just in time Power Apps Build environment
      powerapps_environment_sku: Trial # SKU for the just in time Power Apps Build environment: Production, Sandbox or Trial
      powerapps_environment_currency_name: CAD # Currency name for the just in time Power Apps Build environment
      powerapps_environment_language_code: 1033 # Language code for the just in time Power Apps Build environment (ex: 1033 for English)
      RUNNER_DEBUG: 1

    steps:
    # Set a current date environment variable in the following format: YYYYMMDD
    - name: Set current date as env variable
      run: echo "NOW=$(date +'%Y%m%d')" >> $Env:GITHUB_ENV

    # Set a powerapps_environment_display_name environment variable for the Display Name of the just in time Power Apps Build environment
    - name: Set powerapps_environment_display_name as env variable
      run: echo "powerapps_environment_display_name=Build - ${{ env.NOW }} - ${{ github.run_id }}" >> $Env:GITHUB_ENV
    
    # Set a powerapps_environment_domain_name environment variable for the Domain Name of the just in time Power Apps Build environment
    - name: Set powerapps_environment_domain_name as env variable
      run: echo "powerapps_environment_domain_name=build-${{ env.NOW }}-${{ github.run_id }}" >> $Env:GITHUB_ENV

    # Install the PowerShell modules we will need for the creation of the just in time Power Apps Build environment
    - name: Get PowerShell modules
      run: |
        Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force -Verbose -Scope CurrentUser
        Install-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber -Force -Verbose -Scope CurrentUser
      shell: powershell
    
    # Add a Power Apps account to use the PowerShell Power Apps Admin module
    # Create the just in time Power Apps Build environment
    - name: Add Power Apps account & Create Power Apps environment
      run: |
        $pass = ConvertTo-SecureString "${{ secrets.BUILD_USER_PASSWORD }}" -AsPlainText -Force
        Add-PowerAppsAccount -Username ${{ secrets.BUILD_USER_LOGIN }} -Password $pass
        
        New-AdminPowerAppEnvironment `
          -DisplayName '${{ env.powerapps_environment_display_name }}' `
          -Location ${{ env.powerapps_environment_location }} `
          -EnvironmentSku ${{ env.powerapps_environment_sku }} `
          -ProvisionDatabase `
          -CurrencyName ${{ env.powerapps_environment_currency_name }} `
          -LanguageName ${{ env.powerapps_environment_language_code }} `
          -DomainName ${{ env.powerapps_environment_domain_name }} `
          -WaitUntilFinished 1
      shell: powershell
  
  # Job to build a managed solution in the just in time Power Apps Build environment
  build-managed-solution:
    needs: create-build-environment
    environment:
      name: build_environment
      url: https://${{ env.powerapps_environment_domain_name }}${{ env.powerapps_environment_url_base }}
    runs-on: windows-latest
    env:
      powerapps_environment_url_base: .crm3.dynamics.com
      RUNNER_DEBUG: 1

    steps:
    # Set a current date environment variable in the following format: YYYYMMDD
    - name: Set current date as env variable
      run: echo "NOW=$(date +'%Y%m%d')" >> $Env:GITHUB_ENV

    # Set a powerapps_environment_domain_name environment variable for the Domain Name of the just in time Power Apps Build environment
    - name: Set powerapps_environment_domain_name as env variable
      run: echo "powerapps_environment_domain_name=build-${{ env.NOW }}-${{ github.run_id }}" >> $Env:GITHUB_ENV

    # Action used to checkout the repository
    #   Community action: https://github.com/actions/checkout
    - uses: actions/checkout@v2

    # Pack the considered solution as unmanaged
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/pack-solution/action.yml
    - name: Pack solution
      uses: microsoft/powerplatform-actions/pack-solution@v0.1.8
      with:
        solution-folder: Solutions/${{ env.solution_name }}
        solution-file: out/Solutions/${{ env.solution_name }}.zip
        solution-type: Unmanaged

    # Import the considered solution unmanaged package to the just in time Power Apps Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
    - name: Import solution as unmanaged to build env
      uses: microsoft/powerplatform-actions/import-solution@v0.1.8
      with:
        environment-url: "https://${{ env.powerapps_environment_domain_name }}${{ env.powerapps_environment_url_base }}"
        user-name: ${{ secrets.BUILD_USER_LOGIN }}
        password-secret: ${{ secrets.BUILD_USER_PASSWORD }}
        solution-file: out/Solutions/${{ env.solution_name }}.zip
        force-overwrite: true
        publish-changes: true
        skip-dependency-check: false

    # Export solution as managed from the just in time Power Apps Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/export-solution/action.yml
    - name: Export solution as managed
      uses: microsoft/powerplatform-actions/export-solution@v0.1.8
      with:
        environment-url: "https://${{ env.powerapps_environment_domain_name }}${{ env.powerapps_environment_url_base }}"
        user-name: ${{ secrets.BUILD_USER_LOGIN }}
        password-secret: ${{ secrets.BUILD_USER_PASSWORD }}
        solution-name: ${{ env.solution_name }}
        managed: true
        solution-output-file: out/ship/${{ env.solution_name }}.zip

    # Upload the managed solution we got in the previous step to the GitHub artifact store
    #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
    - name: Upload the ready to ship solution to GH artifact store
      uses: actions/upload-artifact@v2
      with:
        name: managedSolutions
        path: out/ship/${{ env.solution_name }}.zip

  # Job to create a GitHub release from the managed solution generate in the previous job
  create-github-release:
    needs: build-managed-solution
    runs-on: ubuntu-latest
    steps:
      # Set a current date environment variable in the following format: YYYYMMDD
      - name: Set current date as env variable
        run: echo "NOW=$(date +'%Y%m%d')" >> $GITHUB_ENV

      # Action used to checkout the repository
      #   Community action: https://github.com/actions/checkout
      - name: Checkout code
        uses: actions/checkout@v2

      # Get the content of the GitHub artifact store we got in the previous job
      #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
      - name: Fetch the ready to ship solution from GH artifact store
        uses: actions/download-artifact@v2
        with:
          name: managedSolutions
          path: out/release/

      # Create a GitHub release
      #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/create-a-release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.solution_name }}_${{ env.NOW }}_${{ github.run_id }}
          release_name: ${{ env.solution_name }} Release - ${{ env.NOW }} - ${{ github.run_id }}
          body: |
            ${{ github.event.inputs.github_release_body }}
          draft: false
          prerelease: false

      # Upload the managed solution as asset to the GitHub release created in the previous step
      #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/upload-assets-to-a-release
      - name: Upload Release Asset - Solution
        id: upload-release-asset-solution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/release/${{ env.solution_name }}.zip
          asset_name: ${{ env.solution_name }}.zip
          asset_content_type: application/zip

      # Upload the README.md file as asset to the GitHub release created in a previous step
      #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/upload-assets-to-a-release
      - name: Upload Release Asset - README
        id: upload-release-asset-readme
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: README.md
          asset_name: README.md
          asset_content_type: application/md

  # Job to delete the just in time Power Apps Build environment
  delete-build-environment:
    needs: [create-build-environment, create-github-release]
    if: always()
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Set a current date environment variable in the following format: YYYYMMDD
    - name: Set current date as env variable
      run: echo "NOW=$(date +'%Y%m%d')" >> $Env:GITHUB_ENV

    # Set a powerapps_environment_search_name environment variable for the Display Name of the just in time Power Apps Build environment where the " " are replaced by "*"
    - name: Set powerapps_environment_search_name as env variable
      run: echo "powerapps_environment_search_name=Build*-*${{ env.NOW }}*-*${{ github.run_id }}" >> $Env:GITHUB_ENV
    
    # Install the PowerShell modules we will need for the creation of the just in time Power Apps Build environment
    - name: Get PowerShell modules
      run: |
        Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force -Verbose -Scope CurrentUser
        Install-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber -Force -Verbose -Scope CurrentUser
      shell: powershell
    
    # Add a Power Apps account to use the PowerShell Power Apps Admin module
    # Search the just in time Power Apps Build environment to get its ID (EnvironmentName)
    # Delete the just in time Power Apps Build environment
    - name: Add Power Apps account & Delete Power Apps environment
      run: |
        $pass = ConvertTo-SecureString "${{ secrets.BUILD_USER_PASSWORD }}" -AsPlainText -Force
        Add-PowerAppsAccount -Username ${{ secrets.BUILD_USER_LOGIN }} -Password $pass

        $PowerAppEnvironmentDetails = Get-AdminPowerAppEnvironment "*${{ env.powerapps_environment_search_name }}*"
        Remove-AdminPowerAppEnvironment -EnvironmentName $PowerAppEnvironmentDetails.EnvironmentName
      shell: powershell
# Copyright (c) 2020 Raphael Pothin.
# Licensed under the MIT License.

name: import-solution
# Reusable workflow to import a solution to an environment and execute post deployment actions (like canvas apps sharing)

# Workflow triggered by another workflow
on:
  workflow_call:
    inputs:
      environment:
        description: 'Name of the considered GitHub environment for the import of the solution'
        required: true
        type: string
      branch-to-checkout:
        description: 'Branch to checkout to get the elements for the solution import post deployment actions'
        default: 'main'
        required: false
        type: string
      gh-artifact-store-name:
        description: 'Name of the considered GitHub artifact store to get the packed solution to import'
        required: true
        type: string
      packed-solution-file-name:
        description: 'Name (without the extension) of the considered packed solution file'
        required: true
        type: string
      solution-name:
        description: 'Name of the considered solution (not the Display Name)'
        required: true
        type: string
      max-async-wait-time:
        description: 'Maximum wait time allowed for the import of the considered solution to the targeted environment'
        default: 10
        required: false
        type: number
      path-to-deployment-settings-file:
        description: 'Path to deployment settings file if one is considered for this solution import'
        required: true
        type: string
      path-to-custom-deployment-settings-file:
        description: 'Path to custom deployment settings file (for things like canvas apps sharing)'
        required: true
        type: string
      maximum-tries-for-cloud-flows-activation:
        description: 'Maximum tries allowed for the activation of the cloud flows post solution deployment'
        required: true
        type: string
    #secrets: inherit
      # APPLICATION_ID: Application ID that will be used to create the just-in-time Build environment
      # CLIENT_SECRET: Client secret associated to the application ID that will be used to create the just-in-time Build environment
      # TENANT_ID: Tenant ID where the application ID that will be used to create the just-in-time Build environment is located
      # DATAVERSE_ENVIRONMENT_URL: URL of the targeted Dataverse environment
      # DATAVERSE_ENVIRONMENT_DISPLAY_NAME: Display name of the targeted Dataverse environment
      # SOLUTION_COMPONENTS_OWNER_EMAIL: Email of the user account considered for the ownership of solution components (ex: cloud flows)

jobs:
  # Job to import a solution to an environment and execute post deployment actions
  import-solution:
    name: Import solution
    environment:
      name: ${{ inputs.environment }}
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      # Action used to checkout the repository the release branch
      #   Community action: https://github.com/actions/checkout
      - name: Checkout ${{ inputs.branch-to-checkout }} branch
        uses: actions/checkout@v3.0.2
        with:
          ref: ${{ inputs.branch-to-checkout }}

      # Get the content of the GitHub artifact store prepared in a previous job
      #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
      - name: Get solution from GH artifact store
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.gh-artifact-store-name }}
          path: out/${{ inputs.gh-artifact-store-name }}/
      
      # Import the considered solution to the targeted environment
      #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
      - name: Import solution to ${{ inputs.environment }}
        uses: microsoft/powerplatform-actions/import-solution@main
        with:
          app-id: ${{ secrets.APPLICATION_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          environment-url: ${{ secrets.DATAVERSE_ENVIRONMENT_URL }}
          solution-file: out/${{ inputs.gh-artifact-store-name }}/${{ inputs.packed-solution-file-name }}.zip
          force-overwrite: true
          publish-changes: true
          skip-dependency-check: false
          run-asynchronously: true
          max-async-wait-time: ${{ inputs.max-async-wait-time }}
          use-deployment-settings-file: true
          deployment-settings-file: ${{ inputs.path-to-deployment-settings-file }}

      # Complementary steps after solution import
      #   - Turn on cloud flows
      #   - Share canvas apps to Azure AD groups
      - name: Steps post solution import
        run: |
          echo "========== Install Microsoft.PowerApps.Administration.PowerShel module =========="
          Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Scope CurrentUser -Force

          echo "========== Install Microsoft.Xrm.Data.PowerShell module =========="
          Install-Module Microsoft.Xrm.Data.PowerShell -Scope CurrentUser -Force

          echo "==========  Set params =========="
          $Params = @{
            ClientId = "${{ secrets.APPLICATION_ID }}"
            ClientSecret = "${{ secrets.CLIENT_SECRET }}"
            DataverseEnvironmentUrl = "${{ secrets.DATAVERSE_ENVIRONMENT_URL }}"
            SolutionName = "${{ inputs.solution-name }}"
            SolutionComponentsOwnerEmail = "${{ secrets.SOLUTION_COMPONENTS_OWNER_EMAIL }}"
            MaximumTries = "${{ inputs.maximum-tries-for-cloud-flows-activation }}"
          }

          echo "==========  Enable-CloudFlows =========="
          Import-Module ./Scripts/Enable-CloudFlows.ps1 -Force

          Enable-CloudFlows @Params -verbose

          echo "==========  Grant-GroupsAccessToCanvasApps =========="
          Import-Module ./Scripts/Grant-GroupsAccessToCanvasApps.ps1 -Force

          $CanvasAppsAccessGrantParams = @{
            TenantId = "${{ secrets.TENANT_ID }}"
            ClientId = "${{ secrets.APPLICATION_ID }}"
            ClientSecret = "${{ secrets.CLIENT_SECRET }}"
            DataverseEnvironmentUrl = "${{ secrets.DATAVERSE_ENVIRONMENT_URL }}"
            DataverseEnvironmentDisplayName = "${{ secrets.DATAVERSE_ENVIRONMENT_DISPLAY_NAME }}"
            ConfigurationFilePath = "${{ inputs.path-to-custom-deployment-settings-file }}"
          }

          Grant-GroupsAccessToCanvasApps @CanvasAppsAccessGrantParams -verbose
        shell: powershell
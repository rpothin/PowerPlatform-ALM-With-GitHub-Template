# Copyright (c) 2020 Raphael Pothin.
# Licensed under the MIT License.

name: build-managed-solution
# Reusable workflow to build a managed version of a solution using a just-in-time Build environment

# Workflow triggered by another workflow
on:
  workflow_call:
    inputs:
      solution-name:
        description: 'Name of the considered solution (not the Display Name)'
        required: true
        type: string
      solution-major-version:
        description: 'Major version of the solution to build as managed'
        default: '1'
        required: false
        type: string
      branch-to-checkout:
        description: 'Branch to checkout to get the solution to build as managed'
        default: 'main'
        required: false
        type: string
      push-changes-to-branch:
        description: 'Boolean to declare if changes need to be pushed to the considered branch'
        default: false
        required: false
        type: boolean
      upload-unmanaged-solution-to-github-artifact-store:
        description: 'Boolean to declare if unamanged solution needs to be pushed to GitHub artifact store'
        default: false
        required: false
        type: boolean
      pac-cli-version:
        description: 'Considered version of PAC CLI for the pack of the canvas apps'
        required: true
        type: string
      current-date:
        description: 'Current date in YYYYMMDD format'
        required: true
        type: string
      build-environment-url:
        description: 'URL of the Build environment used to generate the managed version of the solution'
        required: true
        type: string
    #secrets: inherit
      # APPLICATION_ID: Application ID that will be used to create the just-in-time Build environment
      # CLIENT_SECRET: Client secret associated to the application ID that will be used to create the just-in-time Build environment
      # TENANT_ID: Tenant ID where the application ID that will be used to create the just-in-time Build environment is located

jobs:
  # Job to build a managed version of a solution using a just-in-time Build environment
  build-managed-solution:
    name: Build managed solution
    environment:
      name: build
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      # Set a path_to_solution_zip_file environment variable for the absolute path of the folder where the solution unmanaged package will be generated
      - name: Set path_to_solution_zip_file as env variable
        run: echo "path_to_solution_zip_file=out/Solutions/${{ inputs.solution-name }}.zip" >> $Env:GITHUB_ENV

      # Action used to checkout the considered branch in the repository
      #   Community action: https://github.com/actions/checkout
      - name: Checkout ${{ inputs.branch-to-checkout }} branch
        uses: actions/checkout@v3.0.2
        with:
          ref: ${{ inputs.branch-to-checkout }}

      # TEMPORARY until out-of-the-box unpack solution action supports full unpack of .msapp files
      # Use temp exe from PowerShell to pack source files into msapp
      #   Source: https://github.com/microsoft/coe-alm-accelerator-templates/blob/main/Pipelines/Templates/build-Solution.yml
      - name: Pack msapp files
        run: |
          $nugetPackage = "Microsoft.PowerApps.CLI"
          $nugetPackageVersion = "${{ inputs.pac-cli-version }}"
          $outFolder = "pac"

          nuget install $nugetPackage -Version $nugetPackageVersion -OutputDirectory $outFolder
            
          $pacNugetFolder = Get-ChildItem $outFolder | Where-Object {$_.Name -match $nugetPackage + "."}

          $pacPath = $pacNugetFolder.FullName + "/tools"

          Get-ChildItem -Path "Solutions/${{ inputs.solution-name }}" -Recurse -Filter *_src | 
          ForEach-Object {     
            $unpackedPath = $_.FullName
            $packedFileName = $unpackedPath.Replace("_msapp_src", ".msapp")

            # Utils\temp-canvas-packager\temp-canvas-packager.exe -pack $packedFileName $unpackedPath

            $env:PATH = $env:PATH + ";" + "$pacPath"
            pac canvas pack --msapp $packedFileName --sources $unpackedPath
            Remove-Item -Path $unpackedPath -Recurse
          }
        shell: pwsh

      # Initialize the solution version
      - name: Set solution version variable
        run: |
          $solutionVersion = '${{ inputs.solution-major-version }}.${{ inputs.current-date }}.${{ github.run_number }}'
          echo "SOLUTION_VERSION=$solutionVersion" >> $Env:GITHUB_ENV
        shell: pwsh

      # Set the solution version in the Solution.xml file
      - name: Set solution version
        run: |
          $file = 'Solutions\${{ inputs.solution-name }}\Other\Solution.xml'
          $regex = '<Version>[\s\S]*?<\/Version>'
          (Get-Content $file) -replace $regex, '<Version>${{ env.SOLUTION_VERSION }}</Version>' | Set-Content $file
        shell: pwsh

      # Push update of solution version to Release branch
      - name: Push changes to ${{ inputs.branch-to-checkout }} branch
        if: ${{ inputs.push-changes-to-branch }}
        run: |
          git config --global user.name 'action@github.com'
          git config --global user.email 'GitHub Action'

          git add --all
          git commit -m "Update version of ${{ inputs.solution-name }} solution to ${{ env.SOLUTION_VERSION }}"
          git  -c http.extraheader="AUTHORIZATION: Bearer ${{ secrets.GITHUB_TOKEN }}" push origin ${{ inputs.branch-to-checkout }}
        shell: pwsh

      # Pack the considered solution as unmanaged
      #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/pack-solution/action.yml
      - name: Pack solution
        uses: microsoft/powerplatform-actions/pack-solution@main
        with:
          solution-folder: Solutions/${{ inputs.solution-name }}
          solution-file: ${{ env.path_to_solution_zip_file }}
          solution-type: Unmanaged

      # Upload the unmanaged solution we packed in the previous step to the GitHub artifact store
      #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
      - name: Upload the unmanaged solution to GH artifact store
        if: ${{ inputs.upload-unmanaged-solution-to-github-artifact-store }}
        uses: actions/upload-artifact@v3
        with:
          name: unmanagedSolutions
          path: ${{ env.path_to_solution_zip_file }}

      # Import the considered solution unmanaged package to the just in time Dataverse Build environment
      #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
      - name: Import solution as unmanaged to build env
        uses: microsoft/powerplatform-actions/import-solution@main
        with:
          app-id: ${{ secrets.APPLICATION_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          environment-url: ${{ inputs.build-environment-url }}
          solution-file: ${{ env.path_to_solution_zip_file }}
          force-overwrite: true
          publish-changes: true
          skip-dependency-check: false
          run-asynchronously: true
          max-async-wait-time: 10
          use-deployment-settings-file: false

      # Export solution as managed from the just in time Dataverse Build environment
      #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/export-solution/action.yml
      - name: Export solution as managed
        uses: microsoft/powerplatform-actions/export-solution@main
        with:
          app-id: ${{ secrets.APPLICATION_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          environment-url: ${{ inputs.build-environment-url }}
          solution-name: ${{ inputs.solution-name }}
          solution-output-file: out/Solutions/${{ inputs.solution-name }}_managed.zip
          managed: true

      # Upload the managed solution we got in the previous step to the GitHub artifact store
      #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
      - name: Upload the ready to ship solution to GH artifact store
        uses: actions/upload-artifact@v3
        with:
          name: managedSolutions
          path: out/Solutions/${{ inputs.solution-name }}_managed.zip
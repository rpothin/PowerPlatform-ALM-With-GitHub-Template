# Copyright (c) 2020 Raphael Pothin.
# Licensed under the MIT License.

name: 6-create-deploy-release
# Create a new release branch
# Generate a GitHub release for the considered solution with a just-in-time Dataverse Build environment
# Deploy this solution to the Dataverse Production environment

# Workflow triggered manually providing the mandatory information described below
on:
  workflow_dispatch:
    inputs:
      solution_base_version:
        description: 'Base of the version of the solution to deploy'
        required: true
      github_release_body:
        description: 'Text for the body of the GitHub release'
        required: true

env:
  solution_name: PowerPlatformALMWithGitHub # Name of the considered solution
  
jobs:
  # Job to initialize a variable for other jobs in the workflow
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      current-date: ${{ steps.current_date.outputs.NOW }}
    env:
      RUNNER_DEBUG: 1

    steps:
    # Set a current date environment variable in the following format: YYYYMMDD
    - name: Set current date as env variable
      id: current_date
      run: echo "::set-output name=NOW::$(date +'%Y%m%d')"
      shell: pwsh

  # Job for the creation of the release branch
  create-release-branch:
    needs: pre_job
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.release_version.outputs.release_version }}
      solution_version: ${{ steps.solution_version.outputs.solution_version }}
    env:
      RUNNER_DEBUG: 1

    steps:
    # Initialize the release version
    - name: Set release version
      id: release_version
      run: |
        $releaseVersion = '${{ github.event.inputs.solution_base_version }}_${{ needs.pre_job.outputs.current-date }}_${{ github.run_number }}'
        echo "RELEASE_VERSION=$releaseVersion" >> $Env:GITHUB_ENV
        echo "::set-output name=release_version::$releaseVersion"
      shell: pwsh

    # Initialize the solution version
    - name: Set solution version
      id: solution_version
      run: |
        $solutionBaseVersion = "${{ github.event.inputs.solution_base_version }}"
        $solutionBaseVersion = $solutionBaseVersion.replace("_", ".")
        $solutionVersion = $solutionBaseVersion + ".${{ needs.pre_job.outputs.current-date }}${{ github.run_number }}"
        echo "::set-output name=solution_version::$solutionVersion"
      shell: pwsh
    
    # Create the new release branch
    #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/create-branch
    - uses: peterjgrainger/action-create-branch@v2.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: release/${{ env.solution_name }}/${{ env.RELEASE_VERSION }}

  # Job for the creation of a just in time Dataverse Build environment
  create-build-environment:
    needs: pre_job
    runs-on: ubuntu-latest
    outputs:
      build-environment-url: ${{ steps.create-build-environment.outputs.environment-url }}
      pac-cli-version: ${{ steps.get-configurations.outputs.pac-cli-version }}
    env:
      dataverse_environment_sku: Sandbox # SKU for the new Dataverse Dev environment (Allowed values: Production, Sandbox, Trial or SubscriptionBasedTrial)
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the main branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout
      uses: actions/checkout@v2
    
    # Get configurations from a JSON file in the repository
    - name: Get configurations
      uses: ./.github/actions/get-configurations
      id: get-configurations

    # Set a dataverse_build_environment_display_name environment variable for the Display Name of the just in time Dataverse Build environment
    - name: Set dataverse_build_environment_display_name as env variable
      run: |
        $dataverseBuildEnvironmentDisplayName = "${{ steps.get-configurations.outputs.build-environment-display-name-base }}${{ needs.pre_job.outputs.current-date }} - ${{ github.run_number }}"
        
        echo "dataverse_build_environment_display_name=$dataverseBuildEnvironmentDisplayName" >> $Env:GITHUB_ENV
      shell: pwsh
    
    # Set a dataverse_build_environment_domain_name environment variable for the Domain Name of the just in time Dataverse Build environment
    - name: Set dataverse_build_environment_domain_name as env variable
      id: dataverse_build_environment_domain_name
      run: |
        $dataverseBuildEnvironmentDomainName = "${{ steps.get-configurations.outputs.build-environment-domain-name-base }}${{ needs.pre_job.outputs.current-date }}-${{ github.run_number }}"
        
        echo "dataverse_build_environment_domain_name=$dataverseBuildEnvironmentDomainName" >> $Env:GITHUB_ENV
      shell: pwsh

    # Create the just in time Dataverse Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/create-environment/action.yml
    - name: Create environment
      id: create-build-environment
      uses: microsoft/powerplatform-actions/create-environment@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        name: ${{ env.dataverse_build_environment_display_name }}
        region: ${{ steps.get-configurations.outputs.environment-region }}
        type: ${{ env.dataverse_environment_sku }}
        currency: ${{ steps.get-configurations.outputs.environment-currency-name }}
        language: ${{ steps.get-configurations.outputs.environment-language-display-name }}
        domain: ${{ env.dataverse_build_environment_domain_name }}
  
  # Job to build a managed solution in the just in time Dataverse Build environment
  build-managed-solution:
    needs: [create-release-branch, create-build-environment]
    environment:
      name: build
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Set a path_to_solution_zip_file environment variable for the absolute path of the folder where the solution unmanaged package will be generated
    - name: Set path_to_solution_zip_file as env variable
      run: echo "path_to_solution_zip_file=out/Solutions/${{ env.solution_name }}.zip" >> $Env:GITHUB_ENV

    # Action used to checkout the considered release branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout branch release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}
      uses: actions/checkout@v2
      with:
        ref: release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}

    # TEMPORARY until out-of-the-box unpack solution action supports formatting json files
    # Flatten all the json files for packing
    #   Source: https://github.com/microsoft/coe-alm-accelerator-templates/blob/main/Pipelines/Templates/build-Solution.yml
    - name: Flatten JSON files
      run: |
        Get-ChildItem -Path "Solutions/${{ env.solution_name }}" -Recurse -Filter *.json |
        ForEach-Object {(Get-Content $_.FullName) -join ' ' | Set-Content $_.FullName}
      shell: pwsh

    # TEMPORARY until out-of-the-box unpack solution action supports full unpack of .msapp files
    # Use temp exe from PowerShell to pack source files into msapp
    #   Source: https://github.com/microsoft/coe-alm-accelerator-templates/blob/main/Pipelines/Templates/build-Solution.yml
    - name: Pack msapp files
      run: |
        $nugetPackage = "Microsoft.PowerApps.CLI"
        $nugetPackageVersion = "${{ needs.create-build-environment.outputs.pac-cli-version }}"
        $outFolder = "pac"

        nuget install $nugetPackage -Version $nugetPackageVersion -OutputDirectory $outFolder
          
        $pacNugetFolder = Get-ChildItem $outFolder | Where-Object {$_.Name -match $nugetPackage + "."}

        $pacPath = $pacNugetFolder.FullName + "/tools"

        Get-ChildItem -Path "Solutions/${{ env.solution_name }}" -Recurse -Filter *_src | 
        ForEach-Object {     
          $unpackedPath = $_.FullName
          $packedFileName = $unpackedPath.Replace("_msapp_src", ".msapp")

          # Utils\temp-canvas-packager\temp-canvas-packager.exe -pack $packedFileName $unpackedPath

          $env:PATH = $env:PATH + ";" + "$pacPath"
          pac canvas pack --msapp $packedFileName --sources $unpackedPath
          Remove-Item -Path $unpackedPath -Recurse
        }
      shell: pwsh

    # Set the solution version in the Solution.xml file
    - name: Set solution version
      run: |
        $file = 'Solutions\${{ env.solution_name }}\Other\Solution.xml'
        $regex = '<Version>[\s\S]*?<\/Version>'
        (Get-Content $file) -replace $regex, '<Version>${{ needs.create-release-branch.outputs.solution_version }}</Version>' | Set-Content $file
      shell: pwsh

    # Push update of solution version to Release branch
    - name: Push changes to Release branch
      run: |
        git config --global user.name 'action@github.com'
        git config --global user.email 'GitHub Action'

        git add --all
        git commit -m "Update version of ${{ env.solution_name }} solution to ${{ needs.create-release-branch.outputs.solution_version }}"
        git  -c http.extraheader="AUTHORIZATION: Bearer ${{ secrets.GITHUB_TOKEN }}" push origin release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}
      shell: pwsh

    # Pack the considered solution as unmanaged
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/pack-solution/action.yml
    - name: Pack solution
      uses: microsoft/powerplatform-actions/pack-solution@main
      with:
        solution-folder: Solutions/${{ env.solution_name }}
        solution-file: ${{ env.path_to_solution_zip_file }}
        solution-type: Unmanaged

    # Upload the unmanaged solution we packed in the previous step to the GitHub artifact store
    #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
    - name: Upload the unmanaged solution to GH artifact store
      uses: actions/upload-artifact@v2
      with:
        name: unmanagedSolutions
        path: ${{ env.path_to_solution_zip_file }}

    # Import the considered solution unmanaged package to the just in time Dataverse Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
    - name: Import solution as unmanaged to build env
      uses: microsoft/powerplatform-actions/import-solution@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ needs.create-build-environment.outputs.build-environment-url }}
        solution-file: ${{ env.path_to_solution_zip_file }}
        force-overwrite: true
        publish-changes: true
        skip-dependency-check: false
        run-asynchronously: true
        max-async-wait-time: 10
        use-deployment-settings-file: false

    # Export solution as managed from the just in time Dataverse Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/export-solution/action.yml
    - name: Export solution as managed
      uses: microsoft/powerplatform-actions/export-solution@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ needs.create-build-environment.outputs.build-environment-url }}
        solution-name: ${{ env.solution_name }}
        solution-output-file: out/Solutions/${{ env.solution_name }}_managed.zip
        managed: true

    # Upload the managed solution we got in the previous step to the GitHub artifact store
    #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
    - name: Upload the ready to ship solution to GH artifact store
      uses: actions/upload-artifact@v2
      with:
        name: managedSolutions
        path: out/Solutions/${{ env.solution_name }}_managed.zip

  # Job to delete the just in time Dataverse Build environment
  delete-build-environment:
    needs: [create-build-environment, build-managed-solution]
    if: always()
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Delete the just in time Dataverse Build environment associated to the issue
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/delete-environment/action.yml
    - name: Delete environment
      uses: microsoft/powerplatform-actions/delete-environment@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ needs.create-build-environment.outputs.build-environment-url }}

  # Job to delete the release branch if solution deployment to Dataverse Build environment fails
  delete-release-branch:
    needs: [create-release-branch, build-managed-solution]
    if: failure()
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the considered release branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout branch release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}
      uses: actions/checkout@v2
      with:
        ref: release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}

    # Delete the Release branch if exists
    - name: Delete Release branch if exists
      run: |
        git config --global user.name 'action@github.com'
        git config --global user.email 'GitHub Action'

        if (git ls-remote origin release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}) {
          git -c http.extraheader="AUTHORIZATION: Bearer ${{ secrets.GITHUB_TOKEN }}" push origin --delete release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}

          Write-Host "release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }} branch deleted."
        }
        else {
          Write-Host "release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }} branch not found."
        }
      shell: pwsh

  # Job to create a GitHub release from the managed solution generate in the previous job
  create-github-release:
    needs: [create-release-branch, build-managed-solution]
    runs-on: ubuntu-latest
    outputs:
      create_release_id: ${{ steps.create_release.outputs.id }}
    steps:
      # Action used to checkout the repository the release branch
      #   Community action: https://github.com/actions/checkout
      - name: Checkout branch release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}
        uses: actions/checkout@v2
        with:
          ref: release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}

      # Get the unmanaged solutions from the GitHub artifact store
      #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
      - name: Fetch the unmanaged solutions from GH artifact store
        uses: actions/download-artifact@v2
        with:
          name: unmanagedSolutions
          path: out/unmanagedSolutions/

      # Get the managed solutions from the GitHub artifact store
      #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
      - name: Fetch the managed solutions from GH artifact store
        uses: actions/download-artifact@v2
        with:
          name: managedSolutions
          path: out/managedSolutions/

      # Create a GitHub release as draft
      #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/create-a-release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.solution_name }}_${{ needs.create-release-branch.outputs.release_version }}
          release_name: ${{ env.solution_name }} - ${{ needs.create-release-branch.outputs.release_version }}
          body: |
            ${{ github.event.inputs.github_release_body }}
          draft: true
          prerelease: false

      # Upload the unmanaged solution as asset to the GitHub release created in the previous step
      #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/upload-assets-to-a-release
      - name: Upload Release Asset - Unmanaged Solution
        id: upload-release-asset-unmanaged-solution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/unmanagedSolutions/${{ env.solution_name }}.zip
          asset_name: ${{ env.solution_name }}.zip
          asset_content_type: application/zip

      # Upload the managed solution as asset to the GitHub release created in the previous step
      #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/upload-assets-to-a-release
      - name: Upload Release Asset - Managed Solution
        id: upload-release-asset-managed-solution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/managedSolutions/${{ env.solution_name }}_managed.zip
          asset_name: ${{ env.solution_name }}_managed.zip
          asset_content_type: application/zip

      # Upload the README.md file as asset to the GitHub release created in a previous step
      #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/upload-assets-to-a-release
      - name: Upload Release Asset - README
        id: upload-release-asset-readme
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: README.md
          asset_name: README.md
          asset_content_type: application/md

  # Job to import the managed solution generated in the previous job to the Dataverse Production environment
  import-solution-to-production:
    needs: [create-release-branch, build-managed-solution]
    environment:
      name: production
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the repository the release branch
    #   Community action: https://github.com/actions/checkout
    - name: Checkout branch release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}
      uses: actions/checkout@v2
      with:
        ref: release/${{ env.solution_name }}/${{ needs.create-release-branch.outputs.release_version }}

    # Get the content of the GitHub artifact store we got in the previous job
    #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
    - name: Fetch the ready to ship solution from GH artifact store
      uses: actions/download-artifact@v2
      with:
        name: managedSolutions
        path: out/release/

    # Import the considered solution managed package to the Dataverse Production environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
    - name: Import solution to Production
      uses: microsoft/powerplatform-actions/import-solution@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ secrets.DATAVERSE_PRODUCTION_ENVIRONMENT_URL }}
        solution-file: out/release/${{ env.solution_name }}_managed.zip
        force-overwrite: true
        publish-changes: true
        skip-dependency-check: false
        run-asynchronously: true
        max-async-wait-time: 10
        use-deployment-settings-file: true
        deployment-settings-file: Configurations/${{ env.solution_name }}/DeploymentSettings_production.json

    # Complementary steps after solution import
    #   - Turn on cloud flows
    #   - Share canvas apps to Azure AD groups
    - name: Steps post solution import
      run: |
        echo "========== Install Microsoft.PowerApps.Administration.PowerShel module =========="
        Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Scope CurrentUser -Force

        echo "========== Install Microsoft.Xrm.Data.PowerShell module =========="
        Install-Module Microsoft.Xrm.Data.PowerShell -Scope CurrentUser -Force

        echo "==========  Set params =========="
        $Params = @{
          ClientId = "${{ secrets.APPLICATION_ID }}"
          ClientSecret = "${{ secrets.CLIENT_SECRET }}"
          DataverseEnvironmentUrl = "${{ secrets.DATAVERSE_PRODUCTION_ENVIRONMENT_URL }}"
          SolutionName = "${{ env.solution_name }}"
          SolutionComponentsOwnerEmail = "${{ secrets.SOLUTION_COMPONENTS_OWNER_EMAIL }}"
        }

        echo "==========  Enable-CloudFlows =========="
        Import-Module ./Scripts/Enable-CloudFlows.ps1 -Force

        Enable-CloudFlows @Params -verbose

        echo "==========  Grant-GroupsAccessToCanvasApps =========="
        Import-Module ./Scripts/Grant-GroupsAccessToCanvasApps.ps1 -Force

        $CanvasAppsAccessGrantParams = @{
          TenantId = "${{ secrets.TENANT_ID }}"
          ClientId = "${{ secrets.APPLICATION_ID }}"
          ClientSecret = "${{ secrets.CLIENT_SECRET }}"
          DataverseEnvironmentUrl = "${{ secrets.DATAVERSE_PRODUCTION_ENVIRONMENT_URL }}"
          DataverseEnvironmentDisplayName = "${{ secrets.DATAVERSE_PRODUCTION_ENVIRONMENT_NAME }}"
          ConfigurationFilePath = "./Configurations/${{ env.solution_name }}/CanvasAppsGroupsAccessMapping.json"
        }

        Grant-GroupsAccessToCanvasApps @CanvasAppsAccessGrantParams -verbose
      shell: powershell

  # Job to publish the GitHub release created earlier in the workflow
  publish-release:
    needs: [create-github-release, import-solution-to-production]
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Publish the GitHub release created in the create-github-release job
    #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/publish-release
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ needs.create-github-release.outputs.create_release_id }}
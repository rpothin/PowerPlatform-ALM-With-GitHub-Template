# Copyright (c) 2020-2022 Raphael Pothin.
# Licensed under the MIT License.

name: 1-workspace-initialization
# Create a branch and generate a Dataverse Dev environment when an issue assigned and labeled with a specific label

# Workflow triggered when an issue is assigned and labeled with a specific label (in our case 'in progress')
on:
  issues:
    types: [assigned, labeled]

# Concurrency configuration for the current workflow - Keep only the latest workflow queued for the considered group and the considered issue
concurrency:
  group: workspace-initialization-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  # Job to check for a duplicate run of this workflow
  pre-job:
    if: github.event.issue.assignees[0] != null && contains(github.event.issue.labels.*.name, 'in progress') && !contains(github.event.issue.labels.*.name, 'dev env created')
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      development-branch-name: ${{ steps.get-configurations.outputs.development-branch-name-base }}${{ github.event.issue.number }}
      environment-region: ${{ steps.get-configurations.outputs.environment-region }}
      environment-language-display-name: ${{ steps.get-configurations.outputs.environment-language-display-name }}
      environment-currency-name: ${{ steps.get-configurations.outputs.environment-currency-name }}
      development-environment-display-name: ${{ steps.get-configurations.outputs.development-environment-display-name-base }}${{ github.event.issue.number }}
      development-environment-domain-name: ${{ steps.get-configurations.outputs.development-environment-domain-name-base }}${{ github.event.issue.number }}
      development-environment-sku-name: ${{ steps.get-configurations.outputs.development-environment-sku-name }}
      developers-azure-ad-group-name: ${{ steps.get-configurations.outputs.developers-azure-ad-group-name }}
      dataverse-environment-description: '${{ steps.job-outputs-definition.outputs.dataverse-environment-description }}'
      powerapps-maker-portal-base-url: ${{ steps.get-configurations.outputs.powerapps-maker-portal-base-url }}
    env:
      RUNNER_DEBUG: 1
      
    steps:
    # Action used to checkout the main branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout
      uses: actions/checkout@v3.0.2
    
    # Get configurations from a JSON file in the repository
    - name: Get configurations
      uses: ./.github/actions/get-configurations
      id: get-configurations

    # Set dataverse-environment-description job output
    - name: Set dataverse-environment-description job output
      id: job-outputs-definition
      run: |
        echo "==========  Set dataverse-environment-description job output =========="
        $dataverseEnvironmentDescription = "${{ steps.get-configurations.outputs.development-environment-description-base }}"

        if ($dataverseEnvironmentDescription -ne '') {
          $dataverseEnvironmentDescription = "${{ steps.get-configurations.outputs.development-environment-description-base }}#${{ github.event.issue.number }} (${{ github.server_url }}/${{ github.repository }}/issues/${{ github.event.issue.number }})"
        }
          
        echo "Dataverse environment description: $dataverseEnvironmentDescription"
        echo "::set-output name=dataverse-environment-description::$dataverseEnvironmentDescription"
      shell: pwsh

  # Job for the creation of the new dev branch
  create-issue-development-branch:
    needs: pre-job
    if: ${{ needs.pre-job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Create the new dev branch
    #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/create-branch
    - uses: peterjgrainger/action-create-branch@v2.2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: ${{ needs.pre-job.outputs.development-branch-name }}

    # Add "Branch created" comment to the issue
    - name: Branch created comment on issue
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.issue.number }}
        body: |
          âœ¨Branch created!

  # Job for the creation of the new Dataverse Dev environment
  create-dataverse-dev-environment:
    needs: pre-job
    if: ${{ needs.pre-job.outputs.should_skip != 'true' }}
    uses: ./.github/workflows/create-dataverse-environment.yml
    with:
      environment-display-name: ${{ needs.pre-job.outputs.development-environment-display-name }}
      environment-domain-name: ${{ needs.pre-job.outputs.development-environment-domain-name }}
      environment-sku-name: ${{ needs.pre-job.outputs.development-environment-sku-name }}
      environment-security-group-name: '${{ needs.pre-job.outputs.developers-azure-ad-group-name }}'
      environment-region: ${{ needs.pre-job.outputs.environment-region }}
      environment-currency-name: ${{ needs.pre-job.outputs.environment-currency-name }}
      environment-language-display-name: ${{ needs.pre-job.outputs.environment-language-display-name }}
      environment-description: '${{ needs.pre-job.outputs.dataverse-environment-description }}'
      power-apps-maker-base-url: ${{ needs.pre-job.outputs.powerapps-maker-portal-base-url }}
      issue-number: ${{ github.event.issue.number }}
    secrets: inherit
      # APPLICATION_ID: Application ID that will be used to create the just-in-time Build environment
      # CLIENT_SECRET: Client secret associated to the application ID that will be used to create the just-in-time Build environment
      # TENANT_ID: Tenant ID where the application ID that will be used to create the just-in-time Build environment is located

  # Job to add the developers to the new Development Dataverse environment
  add-developers-to-dev-environment:
    needs: [pre-job, create-issue-development-branch, create-dataverse-dev-environment]
    environment:
      name: development
      url: ${{ needs.create-dataverse-dev-environment.outputs.power-apps-maker-environment-url }}
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the new dev branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout branch ${{ needs.pre-job.outputs.development-branch-name }}
      uses: actions/checkout@v3.0.2
      with:
        ref: ${{ needs.pre-job.outputs.development-branch-name }}
    
    # Add Azure AD security group with developers as a team on the environment
    - name: Add developers through a team to the environment
      run: |
        echo "========== Install Microsoft.Xrm.Data.PowerShell module =========="
        Install-Module Microsoft.Xrm.Data.PowerShell -Scope CurrentUser -Force

        echo "========== Set params =========="
        $Params = @{
          TenantId = "${{ secrets.TENANT_ID }}"
          ClientId = "${{ secrets.APPLICATION_ID }}"
          ClientSecret = "${{ secrets.CLIENT_SECRET }}"
          DataverseEnvironmentUrl = "${{ needs.create-dataverse-dev-environment.outputs.environment-url }}"
          AzureADSecurityGroupName = "${{ needs.pre-job.outputs.developers-azure-ad-group-name }}"
        }

        echo "========== Add-AADSecurityGroupTeamToDataverseEnvironment =========="
        Import-Module ./Scripts/Add-AADSecurityGroupTeamToDataverseEnvironment.ps1 -Force

        Add-AADSecurityGroupTeamToDataverseEnvironment @Params -verbose
      shell: powershell
  
  # Job for the import of the version of the solution in the main branch to the new Dataverse Dev environment
  import-solution-to-dev-environment:
    needs: [pre-job, create-dataverse-dev-environment, add-developers-to-dev-environment]
    environment:
      name: development
      url: ${{ needs.create-dataverse-dev-environment.outputs.power-apps-maker-environment-url }}
    runs-on: ubuntu-latest
    env:
      solution_name: PowerPlatformALMWithGitHub # Name of the considered solution
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the new dev branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout branch ${{ needs.pre-job.outputs.development-branch-name }}
      uses: actions/checkout@v3.0.2
      with:
        ref: ${{ needs.pre-job.outputs.development-branch-name }}

    # Check if solutions exist before continuing the import process
    - name: Check if solutions exist
      run: |
        if (Test-Path 'Solutions/') {
          $folderChildItems = Get-ChildItem 'Solutions/' -Directory | Measure-Object
          $folderChildItemsCount = $folderChildItems.count

          if ($folderChildItemsCount -gt 0) {
            $solutionsExist = 'true'
          }
          else {
            $solutionsExist = 'false'
          }
        }
        else {
          $solutionsExist = 'false'
        }
        
        echo "SolutionsExist=$solutionsExist" >> $Env:GITHUB_ENV
      shell: pwsh

    # Set a current date environment variable in the following format: YYYYMMDD
    - name: Set current date as env variable
      if: ${{ env.SolutionsExist == 'true' }}
      id: current_date
      run: echo "NOW=$(date +'%Y%m%d')" >> $Env:GITHUB_ENV
      shell: pwsh

    # Initialize the solution version
    - name: Set solution version variable
      if: ${{ env.SolutionsExist == 'true' }}
      run: |
        $solutionVersion = '1.${{ env.NOW }}.${{ github.run_number }}'
        echo "SOLUTION_VERSION=$solutionVersion" >> $Env:GITHUB_ENV
      shell: pwsh

    # Pack and import solutions
    - name: Pack and import solutions
      if: ${{ env.SolutionsExist == 'true' }}
      run: |
        Write-Host "---------- Initialize variables ----------"
        $solutions = @()
        $workflowFailedOrCanceled = 'false'

        Write-Host "---------- List solutions folders ----------"
        cd '${{ github.workspace }}'
        $solutionFolders = Get-ChildItem -Path 'Solutions/' -Directory | Select-Object Name

        Write-Host "========== Pack and import solutions =========="
        foreach ($solutionFolder in $solutionFolders) {
          $solutionName = $solutionFolder.Name
          Write-Host "---------- $solutionName ----------"

          $solution = [PSCustomObject]@{}
          $solution | Add-Member -MemberType NoteProperty -Name "name" -Value $solutionName

          # Trigger workflow run for pack and import of the solution
          #   https://cli.github.com/manual/gh_workflow_run
          Write-Host "Trigger workflow run for pack and import of the solution"
          gh workflow run import-solution-to-dev.yml --ref ${{ needs.pre-job.outputs.development-branch-name }} -f issue_number="${{ github.event.issue.number }}" -f solution_name=$solutionName -f solution_version="${{ env.SOLUTION_VERSION }}" -f dataverse_dev_environment_url="${{ needs.create-dataverse-dev-environment.outputs.environment-url }}"

          # Wait few seconds so that the workflow run triggered appears in the result of the execution of the "gh run list" command
          Start-Sleep -s 5

          # Identify workflow run triggered
          #   https://cli.github.com/manual/gh_run_list
          Write-Host "Identify workflow run triggered"
          $workflowRuns = gh run list -b ${{ needs.pre-job.outputs.development-branch-name }} -w import-solution-to-dev.yml --json name,headBranch,databaseId,status,conclusion,url | ConvertFrom-Json

          $workflowRunDetails = $workflowRuns[0]
          $workflowRunId = $workflowRunDetails.databaseId
          $solution | Add-Member -MemberType NoteProperty -Name "runId" -Value $workflowRunId
          $solution | Add-Member -MemberType NoteProperty -Name "runUrl" -Value $workflowRunDetails.url

          # Watch workflow run triggered
          #   https://cli.github.com/manual/gh_run_watch
          Write-Host "Watch workflow run triggered: $workflowRunId"
          gh run watch $workflowRunId

          # Get workflow run details after completion
          #   https://cli.github.com/manual/gh_run_view
          Write-Host "View workflow run triggered: $workflowRunId"
          gh run view $workflowRunId --json name,headBranch,databaseId,status,conclusion,url | ConvertFrom-Json
          $workflowRunDetailsAfterCompletion = gh run view $workflowRunId --json name,headBranch,databaseId,status,conclusion,url | ConvertFrom-Json
          $workflowRunConclusion = $workflowRunDetailsAfterCompletion.conclusion
          Write-Host "Workflow run conclusion: $workflowRunConclusion"
          $solution | Add-Member -MemberType NoteProperty -Name "runConclusion" -Value $workflowRunConclusion

          # If workflow run failed or canceled update $workflowFailedOrCanceled variable
          if ($workflowRunConclusion -ne 'success') {
            $workflowFailedOrCanceled = 'true'
          }

          $solutions += $solution
        }

        # Display solutions import details
        Write-Host "========== Solutions import details =========="
        $solutions

        # If workflow run failed or canceled, set an environment variable to add a comment on the issue in a subsequent step
        if ($workflowFailedOrCanceled -eq 'true') {
          Write-Host "========== Solutions import not successful =========="
          # Variable to be able to pass a multiline environment variable (JSON) to another step 
          $solutionsImportDetails = $solutions | ConvertTo-Json
          $solutionsImportDetails = $solutionsImportDetails -replace '\n', ''

          echo "SolutionsImportNotSuccessful=$workflowFailedOrCanceled" >> $Env:GITHUB_ENV
          echo "SolutionsImportDetails=$solutionsImportDetails" >> $Env:GITHUB_ENV
        }
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_WORKFLOW_UPDATE }}

    # Add comment to the issue regarding solutions import not successful
    - name: Solutions import not successful
      if: ${{ env.SolutionsImportNotSuccessful == 'true' }}
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.issue.number }}
        body: |
          # âš  Solutions import not successful (details below)

          ```json
          ${{ env.SolutionsImportDetails }}
          ```

  # Job to add a comment on the issue with the dev branch name and the Dataverse Dev environment information
  add-comment-on-issue:
    needs: [pre-job, create-dataverse-dev-environment, import-solution-to-dev-environment]
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Add "Workplace initialized" comment to the issue
    - name: Workplace initialized comment on issue
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.issue.number }}
        body: |
          # ðŸŽ† Workspace initialized!

          - Branch: [**${{ needs.pre-job.outputs.development-branch-name }}**](${{ github.server_url }}/${{ github.repository }}/tree/${{ needs.pre-job.outputs.development-branch-name }})
          - Dataverse Dev environment created:
             - [**Power Apps Maker Portal - ${{ needs.pre-job.outputs.development-environment-display-name }}**](${{ needs.create-dataverse-dev-environment.outputs.power-apps-maker-environment-url }})
             - [**${{ needs.pre-job.outputs.development-environment-display-name }}**](${{ needs.create-dataverse-dev-environment.outputs.environment-url }})
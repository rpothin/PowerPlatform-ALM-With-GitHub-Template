# Copyright (c) 2020-2022 Raphael Pothin.
# Licensed under the MIT License.

name: 1-workspace-initialization
# Create a branch and generate a Dataverse Dev environment when an issue assigned and labeled with a specific label

# Workflow triggered when an issue is assigned and labeled with a specific label (in our case 'in progress')
on:
  issues:
    types: [assigned, labeled]

# Concurrency configuration for the current workflow - Keep only the latest workflow queued for the considered group and the considered issue
concurrency:
  group: workspace-initialization-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  # Job to check for a duplicate run of this workflow
  pre-job:
    if: github.event.issue.assignees[0] != null && contains(github.event.issue.labels.*.name, 'in progress') && !contains(github.event.issue.labels.*.name, 'dev env created')
    runs-on: ubuntu-latest
    outputs:
      development-branch-name: ${{ steps.get-configurations.outputs.development-branch-name-base }}${{ github.event.issue.number }}
      environment-region: ${{ steps.get-configurations.outputs.environment-region }}
      environment-language-code: ${{ steps.get-configurations.outputs.environment-language-code }}
      environment-currency-name: ${{ steps.get-configurations.outputs.environment-currency-name }}
      development-environment-display-name: ${{ steps.get-configurations.outputs.development-environment-display-name-base }}${{ github.event.issue.number }}
      development-environment-domain-name: ${{ steps.get-configurations.outputs.development-environment-domain-name-base }}${{ github.event.issue.number }}
      development-environment-sku-name: ${{ steps.get-configurations.outputs.development-environment-sku-name }}
      developers-azure-ad-group-name: ${{ steps.get-configurations.outputs.developers-azure-ad-group-name }}
      dataverse-environment-description: '${{ steps.job-outputs-definition.outputs.dataverse-environment-description }}'
      powerapps-maker-portal-base-url: ${{ steps.get-configurations.outputs.powerapps-maker-portal-base-url }}
    env:
      RUNNER_DEBUG: 1
      
    steps:
    # Action used to checkout the main branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout
      uses: actions/checkout@v3.1.0
    
    # Get configurations from a JSON file in the repository
    - name: Get configurations
      uses: ./.github/actions/get-configurations
      id: get-configurations

    # Set dataverse-environment-description job output
    - name: Set dataverse-environment-description job output
      id: job-outputs-definition
      run: |
        echo "==========  Set dataverse-environment-description job output =========="
        $dataverseEnvironmentDescription = "${{ steps.get-configurations.outputs.development-environment-description-base }}"

        if ($dataverseEnvironmentDescription -ne '') {
          $dataverseEnvironmentDescription = "${{ steps.get-configurations.outputs.development-environment-description-base }}#${{ github.event.issue.number }} (${{ github.server_url }}/${{ github.repository }}/issues/${{ github.event.issue.number }})"
        }
          
        echo "Dataverse environment description: $dataverseEnvironmentDescription"
        echo "::set-output name=dataverse-environment-description::$dataverseEnvironmentDescription"
      shell: pwsh

  # Job for the creation of the new dev branch
  create-issue-development-branch:
    needs: pre-job
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Create the new dev branch
    #   GitHub Action on the Marketplace: https://github.com/marketplace/actions/create-branch
    - uses: peterjgrainger/action-create-branch@v2.3.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        branch: ${{ needs.pre-job.outputs.development-branch-name }}

    # Add "Branch created" comment to the issue
    - name: Branch created comment on issue
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.issue.number }}
        body: |
          âœ¨Branch created!

  # Job for the creation of the new Dataverse Dev environment
  create-dataverse-dev-environment:
    needs: pre-job
    uses: ./.github/workflows/create-dataverse-environment.yml
    with:
      environment-display-name: ${{ needs.pre-job.outputs.development-environment-display-name }}
      environment-domain-name: ${{ needs.pre-job.outputs.development-environment-domain-name }}
      environment-sku-name: ${{ needs.pre-job.outputs.development-environment-sku-name }}
      environment-security-group-name: '${{ needs.pre-job.outputs.developers-azure-ad-group-name }}'
      environment-region: ${{ needs.pre-job.outputs.environment-region }}
      environment-currency-name: ${{ needs.pre-job.outputs.environment-currency-name }}
      environment-language-code: ${{ needs.pre-job.outputs.environment-language-code }}
      environment-description: '${{ needs.pre-job.outputs.dataverse-environment-description }}'
      power-apps-maker-base-url: ${{ needs.pre-job.outputs.powerapps-maker-portal-base-url }}
      issue-number: ${{ github.event.issue.number }}
    secrets: inherit
      # APPLICATION_ID: Application ID that will be used to create the just-in-time Build environment
      # CLIENT_SECRET: Client secret associated to the application ID that will be used to create the just-in-time Build environment
      # TENANT_ID: Tenant ID where the application ID that will be used to create the just-in-time Build environment is located

  # Job to add the developers to the new Development Dataverse environment
  add-developers-to-dev-environment:
    needs: [pre-job, create-issue-development-branch, create-dataverse-dev-environment]
    environment:
      name: development
      url: ${{ needs.create-dataverse-dev-environment.outputs.power-apps-maker-environment-url }}
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the new dev branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout branch ${{ needs.pre-job.outputs.development-branch-name }}
      uses: actions/checkout@v3.1.0
      with:
        ref: ${{ needs.pre-job.outputs.development-branch-name }}
    
    # Add Azure AD security group with developers as a team on the environment
    - name: Add developers through a team to the environment
      run: |
        echo "========== Install Microsoft.Xrm.Data.PowerShell module =========="
        Install-Module Microsoft.Xrm.Data.PowerShell -Scope CurrentUser -Force

        echo "========== Set params =========="
        $Params = @{
          TenantId = "${{ secrets.TENANT_ID }}"
          ClientId = "${{ secrets.APPLICATION_ID }}"
          ClientSecret = "${{ secrets.CLIENT_SECRET }}"
          DataverseEnvironmentUrl = "${{ needs.create-dataverse-dev-environment.outputs.environment-url }}"
          AzureADSecurityGroupName = "${{ needs.pre-job.outputs.developers-azure-ad-group-name }}"
        }

        echo "========== Add-AADSecurityGroupTeamToDataverseEnvironment =========="
        Import-Module ./Scripts/Add-AADSecurityGroupTeamToDataverseEnvironment.ps1 -Force

        Add-AADSecurityGroupTeamToDataverseEnvironment @Params -verbose
      shell: powershell
  
  # Job for the import of the version of the solution in the main branch to the new Dataverse Dev environment
  import-solution-to-dev-environment:
    needs: [pre-job, create-dataverse-dev-environment, add-developers-to-dev-environment]
    environment:
      name: development
      url: ${{ needs.create-dataverse-dev-environment.outputs.power-apps-maker-environment-url }}
    runs-on: ubuntu-latest
    env:
      solution_name: PowerPlatformALMWithGitHub # Name of the considered solution
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the new dev branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout branch ${{ needs.pre-job.outputs.development-branch-name }}
      uses: actions/checkout@v3.1.0
      with:
        ref: ${{ needs.pre-job.outputs.development-branch-name }}

    # Check if solutions exist before continuing the import process
    - name: Check if solutions exist
      run: |
        if (Test-Path 'Solutions/') {
          $folderChildItems = Get-ChildItem 'Solutions/' -Directory | Measure-Object
          $folderChildItemsCount = $folderChildItems.count

          if ($folderChildItemsCount -gt 0) {
            $solutionsExist = 'true'
          }
          else {
            $solutionsExist = 'false'
          }
        }
        else {
          $solutionsExist = 'false'
        }
        
        echo "SolutionsExist=$solutionsExist" >> $Env:GITHUB_ENV
      shell: pwsh

    # Set a current date environment variable in the following format: YYYYMMDD
    - name: Set current date as env variable
      if: ${{ env.SolutionsExist == 'true' }}
      id: current_date
      run: echo "NOW=$(date +'%Y%m%d')" >> $Env:GITHUB_ENV
      shell: pwsh

    # Initialize the solution version
    - name: Set solution version variable
      if: ${{ env.SolutionsExist == 'true' }}
      run: |
        $solutionVersion = '1.${{ env.NOW }}.${{ github.run_number }}'
        echo "SOLUTION_VERSION=$solutionVersion" >> $Env:GITHUB_ENV
      shell: pwsh

    # List solutions to pack and import
    - name: List solutions
      if: ${{ env.SolutionsExist == 'true' }}
      run: |
        Write-Host "---------- List solutions folders ----------"
        cd '${{ github.workspace }}'
        $solutionFolders = Get-ChildItem -Path 'Solutions/' -Directory | Select-Object Name

        $solutionsToImport = $solutionFolders | ConvertTo-Json
        $solutionsToImport = $solutionsToImport -replace '\n', ''

        echo "SolutionsToImport=$solutionsToImport" >> $Env:GITHUB_ENV
      shell: pwsh
    
    # Pack and import solutions with workflow runs
    - name: Pack and import solutions
      if: ${{ env.SolutionsExist == 'true' }}
      uses: ./.github/actions/run-import-solutions
      id: pack-import-solutions
      with:
        solutions: ${{ env.SolutionsToImport }}
        branch-name: ${{ needs.pre-job.outputs.development-branch-name }}
        environment-url: ${{ needs.create-dataverse-dev-environment.outputs.environment-url }}
        pat-workflow-update: ${{ secrets.PAT_WORKFLOW_UPDATE }}

    # Add comment to the issue regarding solutions import not successful
    - name: Solutions import not successful
      if: ${{ steps.pack-import-solutions.outputs.solutions-import-not-successful == 'true' }}
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.issue.number }}
        body: |
          # âš  Solutions import not successful (details below)

          ```json
          ${{ steps.pack-import-solutions.outputs.solutions-import-details }}
          ```

  # Job to add a comment on the issue with the dev branch name and the Dataverse Dev environment information
  add-comment-on-issue:
    needs: [pre-job, create-dataverse-dev-environment, import-solution-to-dev-environment]
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Add "Workplace initialized" comment to the issue
    - name: Workplace initialized comment on issue
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.issue.number }}
        body: |
          # ðŸŽ† Workspace initialized!

          - Branch: [**${{ needs.pre-job.outputs.development-branch-name }}**](${{ github.server_url }}/${{ github.repository }}/tree/${{ needs.pre-job.outputs.development-branch-name }})
          - Dataverse Dev environment created:
             - [**Power Apps Maker Portal - ${{ needs.pre-job.outputs.development-environment-display-name }}**](${{ needs.create-dataverse-dev-environment.outputs.power-apps-maker-environment-url }})
             - [**${{ needs.pre-job.outputs.development-environment-display-name }}**](${{ needs.create-dataverse-dev-environment.outputs.environment-url }})
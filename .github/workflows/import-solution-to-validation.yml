# Copyright (c) 2020 Raphael Pothin.
# Licensed under the MIT License.

name: 5-import-solution-to-validation
# Upload the solutions to the GitHub workflow run artifacts and deploy them to the Dataverse Validation environment

# Workflow that is triggered by a push of updates in the "Solutions/" folder on the main branch
on:
  push:
    branches: [ main ]
    paths:
      - 'Solutions/**'
      - 'Configurations/**'
      - '!.github/**'
      - '!Configurations/configurations.json'
      - '!Scripts/**'
      - '!.all-contributorsrc'
      - '!.gitignore'
      - '!CHANGELOG.md'
      - '!CODE_OF_CONDUCT.md'
      - '!CONTRIBUTING.md'
      - '!LICENSE'
      - '!README.md'

env:
  solution_name: PowerPlatformALMWithGitHub # Name of the considered solution

jobs:
  # Job for the creation of a just in time Dataverse Build environment
  create-build-environment:
    runs-on: ubuntu-latest
    outputs:
      current-date: ${{ steps.current_date.outputs.NOW }}
      build-environment-url: ${{ steps.create-build-environment.outputs.environment-url }}
      pac-cli-version: ${{ steps.get-configurations.outputs.pac-cli-version }}
      deployment-settings-file-name-base: ${{ steps.get-configurations.outputs.deployment-settings-file-name-base }}
      custom-deployment-settings-file-name-base: ${{ steps.get-configurations.outputs.custom-deployment-settings-file-name-base }}
    env:
      dataverse_environment_sku: Sandbox # SKU for the just in time Dataverse Build environment (Allowed values: Production, Sandbox, Trial or SubscriptionBasedTrial)
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the main branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout
      uses: actions/checkout@v2
    
    # Get configurations from a JSON file in the repository
    - name: Get configurations
      uses: ./.github/actions/get-configurations
      id: get-configurations

    # Set a current date environment variable in the following format: YYYYMMDD
    - name: Set current date as env variable
      id: current_date
      run: echo "::set-output name=NOW::$(date +'%Y%m%d')"
      shell: pwsh

    # Set a dataverse_build_environment_display_name environment variable for the Display Name of the just in time Dataverse Build environment
    - name: Set dataverse_build_environment_display_name as env variable
      run: |
        $dataverseBuildEnvironmentDisplayName = "${{ steps.get-configurations.outputs.build-environment-display-name-base }}${{ steps.current_date.outputs.NOW }} - ${{ github.run_number }}"
        
        echo "dataverse_build_environment_display_name=$dataverseBuildEnvironmentDisplayName" >> $Env:GITHUB_ENV
      shell: pwsh
    
    # Set a dataverse_build_environment_domain_name environment variable for the Domain Name of the just in time Dataverse Build environment
    - name: Set dataverse_build_environment_domain_name as env variable
      id: dataverse_build_environment_domain_name
      run: |
        $dataverseBuildEnvironmentDomainName = "${{ steps.get-configurations.outputs.build-environment-domain-name-base }}${{ steps.current_date.outputs.NOW }}-${{ github.run_number }}"
        
        echo "dataverse_build_environment_domain_name=$dataverseBuildEnvironmentDomainName" >> $Env:GITHUB_ENV
      shell: pwsh

    # Create the just in time Dataverse Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/create-environment/action.yml
    - name: Create environment
      id: create-build-environment
      uses: microsoft/powerplatform-actions/create-environment@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        name: ${{ env.dataverse_build_environment_display_name }}
        region: ${{ steps.get-configurations.outputs.environment-region }}
        type: ${{ env.dataverse_environment_sku }}
        currency: ${{ steps.get-configurations.outputs.environment-currency-name }}
        language: ${{ steps.get-configurations.outputs.environment-language-display-name }}
        domain: ${{ env.dataverse_build_environment_domain_name }}
  
  # Job to build a managed solution in the just in time Dataverse Build environment
  build-managed-solution:
    needs: create-build-environment
    environment:
      name: build
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Set a path_to_solution_zip_file environment variable for the absolute path of the folder where the solution unmanaged package will be generated
    - name: Set path_to_solution_zip_file as env variable
      run: echo "path_to_solution_zip_file=out/Solutions/${{ env.solution_name }}.zip" >> $Env:GITHUB_ENV

    # Action used to checkout the repository
    #   Community action: https://github.com/actions/checkout
    - uses: actions/checkout@v2

    # TEMPORARY until out-of-the-box unpack solution action supports formatting json files
    # Flatten all the json files for packing
    #   Source: https://github.com/microsoft/coe-alm-accelerator-templates/blob/main/Pipelines/Templates/build-Solution.yml
    - name: Flatten JSON files
      run: |
        Get-ChildItem -Path "Solutions/${{ env.solution_name }}" -Recurse -Filter *.json |
        ForEach-Object {(Get-Content $_.FullName) -join ' ' | Set-Content $_.FullName}
      shell: pwsh

    # TEMPORARY until out-of-the-box unpack solution action supports full unpack of .msapp files
    # Use temp exe from PowerShell to pack source files into msapp
    #   Source: https://github.com/microsoft/coe-alm-accelerator-templates/blob/main/Pipelines/Templates/build-Solution.yml
    - name: Pack msapp files
      run: |
        $nugetPackage = "Microsoft.PowerApps.CLI"
        $nugetPackageVersion = "${{ needs.create-build-environment.outputs.pac-cli-version }}"
        $outFolder = "pac"

        nuget install $nugetPackage -Version $nugetPackageVersion -OutputDirectory $outFolder
          
        $pacNugetFolder = Get-ChildItem $outFolder | Where-Object {$_.Name -match $nugetPackage + "."}

        $pacPath = $pacNugetFolder.FullName + "/tools"

        Get-ChildItem -Path "Solutions/${{ env.solution_name }}" -Recurse -Filter *_src | 
        ForEach-Object {     
          $unpackedPath = $_.FullName
          $packedFileName = $unpackedPath.Replace("_msapp_src", ".msapp")

          # Utils\temp-canvas-packager\temp-canvas-packager.exe -pack $packedFileName $unpackedPath

          $env:PATH = $env:PATH + ";" + "$pacPath"
          pac canvas pack --msapp $packedFileName --sources $unpackedPath
          Remove-Item -Path $unpackedPath -Recurse
        }
      shell: pwsh

    # Initialize the solution version
    - name: Set solution version variable
      run: |
        $solutionVersion = '${{ needs.create-build-environment.outputs.current-date }}${{ github.run_number }}'
        echo "SOLUTION_VERSION=$solutionVersion" >> $Env:GITHUB_ENV
      shell: pwsh

    # Set the solution version in the Solution.xml file
    - name: Set solution version
      run: |
        $file = 'Solutions\${{ env.solution_name }}\Other\Solution.xml'
        $regex = '<Version>[\s\S]*?<\/Version>'
        (Get-Content $file) -replace $regex, '<Version>1.0.${{ env.SOLUTION_VERSION }}</Version>' | Set-Content $file
      shell: pwsh

    # Pack the considered solution as unmanaged
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/pack-solution/action.yml
    - name: Pack solution
      uses: microsoft/powerplatform-actions/pack-solution@main
      with:
        solution-folder: Solutions/${{ env.solution_name }}
        solution-file: ${{ env.path_to_solution_zip_file }}
        solution-type: Unmanaged

    # Import the considered solution unmanaged package to the just in time Dataverse Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
    - name: Import solution as unmanaged to build env
      uses: microsoft/powerplatform-actions/import-solution@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ needs.create-build-environment.outputs.build-environment-url }}
        solution-file: ${{ env.path_to_solution_zip_file }}
        force-overwrite: true
        publish-changes: true
        skip-dependency-check: false
        run-asynchronously: true
        max-async-wait-time: 10
        use-deployment-settings-file: false

    # Export solution as managed from the just in time Dataverse Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/export-solution/action.yml
    - name: Export solution as managed
      uses: microsoft/powerplatform-actions/export-solution@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ needs.create-build-environment.outputs.build-environment-url }}
        solution-name: ${{ env.solution_name }}
        solution-output-file: out/ship/${{ env.solution_name }}.zip
        managed: true

    # Upload the managed solution we got in the previous step to the GitHub artifact store
    #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
    - name: Upload the ready to ship solution to GH artifact store
      uses: actions/upload-artifact@v2
      with:
        name: managedSolutions
        path: out/ship/${{ env.solution_name }}.zip

  # Job to import the managed solution generated in the previous job to the Dataverse Validation environment
  import-solution-to-validation:
    needs: [create-build-environment, build-managed-solution]
    environment:
      name: validation
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the repository
    #   Community action: https://github.com/actions/checkout
    - uses: actions/checkout@v2
    
    # Get the content of the GitHub artifact store we got in the previous job
    #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
    - name: Fetch the ready to ship solution from GH artifact store
      uses: actions/download-artifact@v2
      with:
        name: managedSolutions
        path: out/release/

    # Import the considered solution managed package to the Dataverse Validation environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
    - name: Import solution to Validation
      uses: microsoft/powerplatform-actions/import-solution@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ secrets.DATAVERSE_VALIDATION_ENVIRONMENT_URL }}
        solution-file: out/release/${{ env.solution_name }}.zip
        force-overwrite: true
        publish-changes: true
        skip-dependency-check: false
        run-asynchronously: true
        max-async-wait-time: 10
        use-deployment-settings-file: true
        deployment-settings-file: Configurations/${{ env.solution_name }}/${{ needs.create-build-environment.outputs.deployment-settings-file-name-base }}_validation.json

    # Complementary steps after solution import
    #   - Turn on cloud flows
    #   - Share canvas apps to Azure AD groups
    - name: Steps post solution import
      run: |
        echo "========== Install Microsoft.PowerApps.Administration.PowerShel module =========="
        Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Scope CurrentUser -Force

        echo "========== Install Microsoft.Xrm.Data.PowerShell module =========="
        Install-Module Microsoft.Xrm.Data.PowerShell -Scope CurrentUser -Force

        echo "==========  Set params =========="
        $Params = @{
          ClientId = "${{ secrets.APPLICATION_ID }}"
          ClientSecret = "${{ secrets.CLIENT_SECRET }}"
          DataverseEnvironmentUrl = "${{ secrets.DATAVERSE_VALIDATION_ENVIRONMENT_URL }}"
          SolutionName = "${{ env.solution_name }}"
          SolutionComponentsOwnerEmail = "${{ secrets.SOLUTION_COMPONENTS_OWNER_EMAIL }}"
        }

        echo "==========  Enable-CloudFlows =========="
        Import-Module ./Scripts/Enable-CloudFlows.ps1 -Force

        Enable-CloudFlows @Params -verbose

        echo "==========  Grant-GroupsAccessToCanvasApps =========="
        Import-Module ./Scripts/Grant-GroupsAccessToCanvasApps.ps1 -Force

        $CanvasAppsAccessGrantParams = @{
          TenantId = "${{ secrets.TENANT_ID }}"
          ClientId = "${{ secrets.APPLICATION_ID }}"
          ClientSecret = "${{ secrets.CLIENT_SECRET }}"
          DataverseEnvironmentUrl = "${{ secrets.DATAVERSE_VALIDATION_ENVIRONMENT_URL }}"
          DataverseEnvironmentDisplayName = "${{ secrets.DATAVERSE_VALIDATION_ENVIRONMENT_NAME }}"
          ConfigurationFilePath = "./Configurations/${{ env.solution_name }}/${{ needs.create-build-environment.outputs.custom-deployment-settings-file-name-base }}_validation.json"
        }

        Grant-GroupsAccessToCanvasApps @CanvasAppsAccessGrantParams -verbose
      shell: powershell

  # Job to delete the just in time Dataverse Build environment
  delete-build-environment:
    needs: [create-build-environment, build-managed-solution]
    if: always()
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Delete the just in time Dataverse Build environment created in this workflow
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/delete-environment/action.yml
    - name: Delete environment
      uses: microsoft/powerplatform-actions/delete-environment@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ needs.create-build-environment.outputs.build-environment-url }}
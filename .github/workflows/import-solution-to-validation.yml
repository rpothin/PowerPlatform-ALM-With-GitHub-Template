# Copyright (c) 2020 Raphael Pothin.
# Licensed under the MIT License.

name: 5-import-solution-to-validation
# Upload the solutions to the GitHub workflow run artifacts and deploy them to the Dataverse Validation environment

# Workflow that is triggered by a push of updates in the "Solutions/" folder on the main branch
on:
  push:
    branches: [ main ]
    paths:
      - 'Solutions/**'
      - 'Configurations/**'
      - '!.github/**'
      - '!Configurations/configurations.json'
      - '!Scripts/**'
      - '!.all-contributorsrc'
      - '!.gitignore'
      - '!CHANGELOG.md'
      - '!CODE_OF_CONDUCT.md'
      - '!CONTRIBUTING.md'
      - '!LICENSE'
      - '!README.md'

env:
  solution_name: PowerPlatformALMWithGitHub # Name of the considered solution

jobs:
  # Job to initialize a variable for other jobs in the workflow
  pre-job:
    runs-on: ubuntu-latest
    outputs:
      current-date: ${{ steps.current_date.outputs.NOW }}
      build-environment-display-name-base: ${{ steps.get-configurations.outputs.build-environment-display-name-base }}
      build-environment-domain-name-base: ${{ steps.get-configurations.outputs.build-environment-domain-name-base }}
      environment-region: ${{ steps.get-configurations.outputs.environment-region }}
      build-environment-sku-name: ${{ steps.get-configurations.outputs.build-environment-sku-name }}
      environment-currency-name: ${{ steps.get-configurations.outputs.environment-currency-name }}
      environment-language-display-name: ${{ steps.get-configurations.outputs.environment-language-display-name }}
      pac-cli-version: ${{ steps.get-configurations.outputs.pac-cli-version }}
      deployment-settings-file-name-base: ${{ steps.get-configurations.outputs.deployment-settings-file-name-base }}
      custom-deployment-settings-file-name-base: ${{ steps.get-configurations.outputs.custom-deployment-settings-file-name-base }}
    env:
      RUNNER_DEBUG: 1

    steps:
    # Set a current date environment variable in the following format: YYYYMMDD
    - name: Set current date as env variable
      id: current_date
      run: echo "::set-output name=NOW::$(date +'%Y%m%d')"
      shell: pwsh
    
    # Action used to checkout the main branch in the current repository
    #   Community action: https://github.com/actions/checkout
    - name: Checkout
      uses: actions/checkout@v2
    
    # Get configurations from a JSON file in the repository
    - name: Get configurations
      uses: ./.github/actions/get-configurations
      id: get-configurations

  # Job for the creation of a just in time Dataverse Build environment
  create-build-environment:
    needs: pre-job
    uses: ./.github/workflows/create-just-in-time-build-environment.yml
    with:
      current-date: ${{ needs.pre-job.outputs.current-date }}
      build-environment-display-name-base: ${{ needs.pre-job.outputs.build-environment-display-name-base }}
      build-environment-domain-name-base: ${{ needs.pre-job.outputs.build-environment-domain-name-base }}
      environment-region: ${{ needs.pre-job.outputs.environment-region }}
      build-environment-sku-name: ${{ needs.pre-job.outputs.build-environment-sku-name }}
      environment-currency-name: ${{ needs.pre-job.outputs.environment-currency-name }}
      environment-language-display-name: ${{ needs.pre-job.outputs.environment-language-display-name }}
    secrets: inherit
      # APPLICATION_ID: Application ID that will be used to create the just-in-time Build environment
      # CLIENT_SECRET: Client secret associated to the application ID that will be used to create the just-in-time Build environment
      # TENANT_ID: Tenant ID where the application ID that will be used to create the just-in-time Build environment is located

  # Job to build a managed version of a solution using a just-in-time Build environment
  build-managed-solution:
    needs: [pre-job, create-build-environment]
    uses: ./.github/workflows/build-managed-solution.yml
    with:
      solution-name: $solution_name
      pac-cli-version: ${{ needs.pre-job.outputs.pac-cli-version }}
      current-date: ${{ needs.pre-job.outputs.current-date }}
      build-environment-url: ${{ needs.create-build-environment.outputs.build-environment-url }}
    secrets: inherit
      # APPLICATION_ID: Application ID that will be used to create the just-in-time Build environment
      # CLIENT_SECRET: Client secret associated to the application ID that will be used to create the just-in-time Build environment
      # TENANT_ID: Tenant ID where the application ID that will be used to create the just-in-time Build environment is located

  # Job to import the managed solution generated in the previous job to the Dataverse Validation environment
  import-solution-to-validation:
    needs: [pre-job, create-build-environment, build-managed-solution]
    environment:
      name: validation
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Action used to checkout the repository
    #   Community action: https://github.com/actions/checkout
    - uses: actions/checkout@v2
    
    # Get the content of the GitHub artifact store we got in the previous job
    #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
    - name: Fetch the ready to ship solution from GH artifact store
      uses: actions/download-artifact@v2
      with:
        name: managedSolutions
        path: out/release/

    # Import the considered solution managed package to the Dataverse Validation environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
    - name: Import solution to Validation
      uses: microsoft/powerplatform-actions/import-solution@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ secrets.DATAVERSE_VALIDATION_ENVIRONMENT_URL }}
        solution-file: out/release/${{ env.solution_name }}.zip
        force-overwrite: true
        publish-changes: true
        skip-dependency-check: false
        run-asynchronously: true
        max-async-wait-time: 10
        use-deployment-settings-file: true
        deployment-settings-file: Configurations/${{ env.solution_name }}/${{ needs.pre-job.outputs.deployment-settings-file-name-base }}_validation.json

    # Complementary steps after solution import
    #   - Turn on cloud flows
    #   - Share canvas apps to Azure AD groups
    - name: Steps post solution import
      run: |
        echo "========== Install Microsoft.PowerApps.Administration.PowerShel module =========="
        Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Scope CurrentUser -Force

        echo "========== Install Microsoft.Xrm.Data.PowerShell module =========="
        Install-Module Microsoft.Xrm.Data.PowerShell -Scope CurrentUser -Force

        echo "==========  Set params =========="
        $Params = @{
          ClientId = "${{ secrets.APPLICATION_ID }}"
          ClientSecret = "${{ secrets.CLIENT_SECRET }}"
          DataverseEnvironmentUrl = "${{ secrets.DATAVERSE_VALIDATION_ENVIRONMENT_URL }}"
          SolutionName = "${{ env.solution_name }}"
          SolutionComponentsOwnerEmail = "${{ secrets.SOLUTION_COMPONENTS_OWNER_EMAIL }}"
        }

        echo "==========  Enable-CloudFlows =========="
        Import-Module ./Scripts/Enable-CloudFlows.ps1 -Force

        Enable-CloudFlows @Params -verbose

        echo "==========  Grant-GroupsAccessToCanvasApps =========="
        Import-Module ./Scripts/Grant-GroupsAccessToCanvasApps.ps1 -Force

        $CanvasAppsAccessGrantParams = @{
          TenantId = "${{ secrets.TENANT_ID }}"
          ClientId = "${{ secrets.APPLICATION_ID }}"
          ClientSecret = "${{ secrets.CLIENT_SECRET }}"
          DataverseEnvironmentUrl = "${{ secrets.DATAVERSE_VALIDATION_ENVIRONMENT_URL }}"
          DataverseEnvironmentDisplayName = "${{ secrets.DATAVERSE_VALIDATION_ENVIRONMENT_NAME }}"
          ConfigurationFilePath = "./Configurations/${{ env.solution_name }}/${{ needs.pre-job.outputs.custom-deployment-settings-file-name-base }}_validation.json"
        }

        Grant-GroupsAccessToCanvasApps @CanvasAppsAccessGrantParams -verbose
      shell: powershell

  # Job to delete the just in time Dataverse Build environment
  delete-build-environment:
    needs: [create-build-environment, build-managed-solution]
    if: always()
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Delete the just in time Dataverse Build environment created in this workflow
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/delete-environment/action.yml
    - name: Delete environment
      uses: microsoft/powerplatform-actions/delete-environment@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: ${{ needs.create-build-environment.outputs.build-environment-url }}
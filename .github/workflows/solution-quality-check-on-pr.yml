# Copyright (c) 2020 Raphael Pothin.
# Licensed under the MIT License.

name: 3-solution-quality-check-on-pr
# Check the quality of a solution on a pull request targeting the main branch

# Workflow triggered by a pull request targeting the main branch
on:
  pull_request:
    branches:
      - main

env:
  dataverse_environment_url_base: ${{ secrets.DATAVERSE_ENVIRONMENT_URL_BASE }} # Base URL for the just in time Dataverse Build environment

jobs:
  # Job for the creation of a just in time Dataverse Build environment
  create-build-environment:
    runs-on: ubuntu-latest
    outputs:
      dataverse_build_environment_domain_name: ${{ steps.dataverse_build_environment_domain_name.outputs.dataverse_build_environment_domain_name }}
    env:
      dataverse_environment_sku: Sandbox # SKU for the new Dataverse Dev environment (Allowed values: Production, Sandbox, Trial or SubscriptionBasedTrial)
      RUNNER_DEBUG: 1

    steps:
    # Set a current date environment variable in the following format: YYYYMMDD
    - name: Set current date as env variable
      id: current_date
      run: echo "NOW=$(date +'%Y%m%d')" >> $Env:GITHUB_ENV
      shell: pwsh

    # Set a dataverse_build_environment_display_name environment variable for the Display Name of the just in time Dataverse Build environment
    - name: Set dataverse_build_environment_display_name as env variable
      run: echo "dataverse_build_environment_display_name=Build - ${{ env.NOW }} - ${{ github.run_number }}" >> $Env:GITHUB_ENV
      shell: pwsh
    
    # Set a dataverse_build_environment_domain_name environment variable for the Domain Name of the just in time Dataverse Build environment
    - name: Set dataverse_build_environment_domain_name as env variable
      id: dataverse_build_environment_domain_name
      run: |
        $dataverseBuildEnvironmentDomainName='gh-build-${{ env.NOW }}-${{ github.run_number }}'
        echo "dataverse_build_environment_domain_name=$dataverseBuildEnvironmentDomainName" >> $Env:GITHUB_ENV
        echo "::set-output name=dataverse_build_environment_domain_name::$dataverseBuildEnvironmentDomainName"
      shell: pwsh

    # Create the just in time Dataverse Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/create-environment/action.yml
    - name: Create environment
      uses: microsoft/powerplatform-actions/create-environment@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        name: ${{ env.dataverse_build_environment_display_name }}
        region: ${{ secrets.DATAVERSE_ENVIRONMENT_REGION }}
        type: ${{ env.dataverse_environment_sku }}
        currency: ${{ secrets.DATAVERSE_ENVIRONMENT_CURRENCY_NAME }}
        language: ${{ secrets.DATAVERSE_ENVIRONMENT_LANGUAGE_NAME }}
        domain: ${{ env.dataverse_build_environment_domain_name }}
  
  # Job a for simple quality checks on the considered solution
  solution-quality-checks:
    needs: create-build-environment
    environment:
      name: build
      url: https://${{ needs.create-build-environment.outputs.dataverse_build_environment_domain_name }}${{ env.dataverse_environment_url_base }}
    runs-on: windows-latest
    outputs:
      solution_checker_status: ${{ steps.solution_checker_status.outputs.status }}
    env:
      solution_name: PowerPlatformALMWithGitHub # Name of the considered solution
      solution_checker_result_output_directory:  solutionchecker/ # Output folder for the results of the solution checker execution
      solution_checker_geography: Canada # Considered geography for the solution checker execution (https://docs.microsoft.com/en-us/power-platform/alm/checker-api/overview#determine-a-geography)
      solution_checker_max_nb_medium_severity_points: 5 # Maximum number of the Medium severity points that will be tolerate in the solution checker results
      solution_checker_max_nb_high_severity_points: 0 # Maximum number of the High severity points that will be tolerate in the solution checker results
      RUNNER_DEBUG: 1

    steps:
    # Set a path_to_solution_zip_file environment variable for the absolute path of the folder where the solution unmanaged package will be generated
    - name: Set path_to_solution_zip_file as env variable
      run: echo "path_to_solution_zip_file=out/Solutions/${{ env.solution_name }}.zip" >> $Env:GITHUB_ENV

    # Action used to checkout the repository
    #   Community action: https://github.com/actions/checkout
    - uses: actions/checkout@v2

    # TEMPORARY until out-of-the-box unpack solution action supports formatting json files
    # Flatten all the json files for packing
    #   Source: https://github.com/microsoft/coe-alm-accelerator-templates/blob/main/Pipelines/Templates/build-Solution.yml
    - name: Flatten JSON files
      run: |
        Get-ChildItem -Path "Solutions/${{ env.solution_name }}" -Recurse -Filter *.json |
        ForEach-Object {(Get-Content $_.FullName) -join ' ' | Set-Content $_.FullName}
      shell: pwsh

    # TEMPORARY until out-of-the-box unpack solution action supports full unpack of .msapp files
    # Use temp exe from PowerShell to pack source files into msapp
    #   Source: https://github.com/microsoft/coe-alm-accelerator-templates/blob/main/Pipelines/Templates/build-Solution.yml
    - name: Pack msapp files
      run: |
        $nugetPackage = "Microsoft.PowerApps.CLI"
        $nugetPackageVersion = "${{ secrets.PAC_CLI_VERSION }}" # 1.8.6
        $outFolder = "pac"

        nuget install $nugetPackage -Version $nugetPackageVersion -OutputDirectory $outFolder
          
        $pacNugetFolder = Get-ChildItem $outFolder | Where-Object {$_.Name -match $nugetPackage + "."}

        $pacPath = $pacNugetFolder.FullName + "/tools"

        Get-ChildItem -Path "Solutions/${{ env.solution_name }}" -Recurse -Filter *_src | 
        ForEach-Object {     
          $unpackedPath = $_.FullName
          $packedFileName = $unpackedPath.Replace("_msapp_src", ".msapp")

          # Utils\temp-canvas-packager\temp-canvas-packager.exe -pack $packedFileName $unpackedPath

          $env:PATH = $env:PATH + ";" + "$pacPath"
          pac canvas pack --msapp $packedFileName --sources $unpackedPath
          Remove-Item -Path $unpackedPath -Recurse
        }
      shell: pwsh

    # Pack the considered solution as unmanaged
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/pack-solution/action.yml
    - name: Pack solution as unmanaged
      uses: microsoft/powerplatform-actions/pack-solution@main
      with:
        solution-folder: Solutions/${{ env.solution_name }}
        solution-file: ${{ env.path_to_solution_zip_file }}
        solution-type: Unmanaged

    # Install the PowerShell modules we will need to execute the solution checker on the solution package generated in the previous step
    - name: Get PowerShell modules
      run: |
        Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Force -Verbose -Scope CurrentUser
        Install-Module -Name Microsoft.PowerApps.PowerShell -AllowClobber -Force -Verbose -Scope CurrentUser
        Install-Module -Name Microsoft.PowerApps.Checker.PowerShell -Force -Verbose -Scope CurrentUser
      shell: powershell

    # Create the output folder for the results of the solution checker execution
    # Add a Power Apps account to use the PowerShell Checker module
    # Set some parameters to call the solution checker
    # Invoke the solution checker
    - name: Invoke solution checker
      run: |
        New-Item -ItemType Directory -Force -Path ${{ env.solution_checker_result_output_directory }}

        Add-PowerAppsAccount -TenantID ${{ secrets.TENANT_ID }} -ApplicationId ${{ secrets.APPLICATION_ID }} -ClientSecret ${{ secrets.CLIENT_SECRET }}
        
        $rulesets = Get-PowerAppsCheckerRulesets -Geography ${{ env.solution_checker_geography }}
        $rulesetToUse = $rulesets | where Name -NE 'AppSource Certification'
        
        $analyzeResult = Invoke-PowerAppsChecker `
          -Geography ${{ env.solution_checker_geography }} `
          -ClientApplicationId '${{ secrets.APPLICATION_ID }}' `
          -TenantId '${{ secrets.TENANT_ID }}' `
          -Ruleset $rulesetToUse `
          -FileUnderAnalysis ${{ env.path_to_solution_zip_file }} `
          -OutputDirectory "${{ env.solution_checker_result_output_directory }}" `
          -ClientApplicationSecret (ConvertTo-SecureString -AsPlainText -Force -String '${{ secrets.CLIENT_SECRET }}')
      shell: powershell

    # Unzip file generated by the solution checker execution
    # Put the content of the sarif file generated by the solution checker execution in a variable
    # Get the results of the solution checker execution
    # Extract the number of the Medium and High severity points from the results of the solution checker execution
    - name: Extract results of solution checker execution
      run:  |
        Get-ChildItem "${{ env.solution_checker_result_output_directory }}" -Filter *.zip | Expand-Archive -DestinationPath '${{ env.solution_checker_result_output_directory }}' -Force

        $sarif_files = Get-ChildItem "${{ env.solution_checker_result_output_directory }}" -Filter *.sarif

        foreach ($sarif_file in $sarif_files) {
          $SolutionCheckerResultJson = Get-Content -Path ${{ env.solution_checker_result_output_directory }}/$sarif_file
        }

        $SolutionCheckerResult = $SolutionCheckerResultJson | ConvertFrom-Json
        $results = $SolutionCheckerResult.runs.results

        echo $results

        $nbOfMediumSeverityPoints = 0
        $nbOfHighSeverityPoints = 0

        $results.foreach({
          if($_.properties.severity -eq "Medium") {
            $nbOfMediumSeverityPoints++
          }
          elseif($_.properties.severity -eq "High") {
            $nbOfHighSeverityPoints++
          }
        })

        Write-Host "Nb of Medium severity points: $nbOfMediumSeverityPoints"
        Write-Host "Nb of High severity points: $nbOfHighSeverityPoints"

        echo "NB_OF_MEDIUM_SEVERITY_POINTS=$nbOfMediumSeverityPoints" >> $Env:GITHUB_ENV
        echo "NB_OF_HIGH_SEVERITY_POINTS=$nbOfHighSeverityPoints" >> $Env:GITHUB_ENV
      shell: powershell
        
    # Add the new comment to the pull request if too many Medium or High severity points in the results of the solution checker execution
    - name: New comment on pull request if too many errors
      if: Env.NB_OF_MEDIUM_SEVERITY_POINTS > env.solution_checker_max_nb_medium_severity_points || Env.NB_OF_HIGH_SEVERITY_POINTS > env.solution_checker_max_nb_high_severity_points
      uses: peter-evans/create-or-update-comment@v1
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          # ⚠ Too many Medium or High severity points in solution checker results!

          Details:
          - NB_OF_HIGH_SEVERITY_POINTS: ${{ env.NB_OF_HIGH_SEVERITY_POINTS }} (Max: ${{ env.solution_checker_max_nb_high_severity_points }})
          - NB_OF_MEDIUM_SEVERITY_POINTS: ${{ env.NB_OF_MEDIUM_SEVERITY_POINTS }} (Max: ${{ env.solution_checker_max_nb_medium_severity_points }})
    
    # Set solution_checker_status job output value to "KO" if too many Medium or High severity points in the results of the solution checker execution
    - name: Set solution_checker_status job output
      id: solution_checker_status
      if: Env.NB_OF_MEDIUM_SEVERITY_POINTS > env.solution_checker_max_nb_medium_severity_points || Env.NB_OF_HIGH_SEVERITY_POINTS > env.solution_checker_max_nb_high_severity_points
      run: echo "::set-output name=status::KO"

    # Import the considered solution unmanaged package to the just in time Dataverse Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
    - name: Import solution as unmanaged to build env
      if: Env.NB_OF_MEDIUM_SEVERITY_POINTS <= env.solution_checker_max_nb_medium_severity_points || Env.NB_OF_HIGH_SEVERITY_POINTS <= env.solution_checker_max_nb_high_severity_points
      uses: microsoft/powerplatform-actions/import-solution@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: https://${{ needs.create-build-environment.outputs.dataverse_build_environment_domain_name }}${{ env.dataverse_environment_url_base }}
        solution-file: ${{ env.path_to_solution_zip_file }}
        force-overwrite: true
        publish-changes: true
        skip-dependency-check: false
        run-asynchronously: true
        max-async-wait-time: 10

    # Export solution as managed from the just in time Dataverse Build environment
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/export-solution/action.yml
    - name: Export solution as managed
      if: Env.NB_OF_MEDIUM_SEVERITY_POINTS <= env.solution_checker_max_nb_medium_severity_points || Env.NB_OF_HIGH_SEVERITY_POINTS <= env.solution_checker_max_nb_high_severity_points
      uses: microsoft/powerplatform-actions/export-solution@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: https://${{ needs.create-build-environment.outputs.dataverse_build_environment_domain_name }}${{ env.dataverse_environment_url_base }}
        solution-name: ${{ env.solution_name }}
        solution-output-file: out/ship/${{ env.solution_name }}.zip
        managed: true

    # Upload the managed solution we got in the previous step to the GitHub artifact store
    #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
    - name: Upload the ready to ship solution to GH artifact store
      if: Env.NB_OF_MEDIUM_SEVERITY_POINTS <= env.solution_checker_max_nb_medium_severity_points || Env.NB_OF_HIGH_SEVERITY_POINTS <= env.solution_checker_max_nb_high_severity_points
      uses: actions/upload-artifact@v2
      with:
        name: managedSolutions
        path: out/ship/${{ env.solution_name }}.zip

  # Job to delete the just in time Dataverse Build environment
  delete-build-environment:
    needs: [create-build-environment, solution-quality-checks]
    if: always()
    runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    # Delete the just in time Dataverse Build environment associated to the issue
    #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/delete-environment/action.yml
    - name: Delete environment
      uses: microsoft/powerplatform-actions/delete-environment@main
      with:
        app-id: ${{ secrets.APPLICATION_ID }}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{ secrets.TENANT_ID }}
        environment-url: https://${{ needs.create-build-environment.outputs.dataverse_build_environment_domain_name }}${{ env.dataverse_environment_url_base }}
        
    # Run a command that will failed if too many Medium or High severity points in the results of the solution checker execution to stop the run
    - name: Exit if too many notable points in solution checker results
      if: needs.solution-quality-checks.outputs.solution_checker_status == 'KO'
      run: cd exit